{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Agents Arcade","text":"<p><code>agents-arcade</code> provides an integration between Arcade and the OpenAI Agents Library. This allows you to enhance your AI agents with Arcade tools like Google Mail, LinkedIn, X, or ones you build yourself with the Tool SDK.</p> <p>For a list of all hosted tools and auth providers you can use to build your own, see the Arcade Integrations documentation.</p>"},{"location":"#what-is-agents-arcade","title":"What is Agents Arcade?","text":"<p>Agents Arcade connects OpenAI Agents to Arcade's extensive collection of tools and integrations. With Agents Arcade, you can:</p> <ul> <li>Access Powerful Integrations: Connect your agents to tools like Google Workspace, GitHub, LinkedIn, X, and more</li> <li>Handle Authentication: Seamlessly manage user authorization for tools that require it</li> <li>Build Custom Tools: Create and integrate your own tools using Arcade's Tool SDK</li> </ul>"},{"location":"#key-features","title":"Key Features","text":"<ul> <li>Easy Integration: Simple API to connect Arcade tools with OpenAI Agents</li> <li>Extensive Toolkit Support: Access to all Arcade toolkits including Gmail, Google Drive, Search, and more</li> <li>Asynchronous Support: Built with async/await for compatibility with OpenAI's Agent framework</li> <li>Authentication Handling: Manages authorization for tools requiring user permissions</li> </ul>"},{"location":"#installation","title":"Installation","text":"<pre><code>pip install agents-arcade\n</code></pre>"},{"location":"#requirements","title":"Requirements","text":"<p>You need an Arcade API Key, and also an OpenAI API Key. Make sure they're available</p> <pre><code>export ARCADE_API_KEY=...\nexport OPENAI_API_KEY=...\n</code></pre>"},{"location":"#quick-example","title":"Quick Example","text":"<pre><code>from agents import Agent, Runner\nfrom arcadepy import AsyncArcade\n\nfrom agents_arcade import get_arcade_tools\nfrom agents_arcade.errors import AuthorizationError\n\n\nasync def main():\n    client = AsyncArcade()\n    # Use the \"github\" toolkit for this example\n    tools = await get_arcade_tools(client, toolkits=[\"github\"])\n\n    # Create an agent that can use the github toolkit\n    github_agent = Agent(\n        name=\"GitHub agent\",\n        instructions=\"You are a helpful assistant that can assist with GitHub API calls.\",\n        model=\"gpt-4o-mini\",\n        tools=tools,\n    )\n\n    try:\n        result = await Runner.run(\n            starting_agent=github_agent,\n            input=\"Star the arcadeai/arcade-ai repo\",\n            # make sure you pass a UNIQUE user_id for auth\n            context={\"user_id\": \"user@example.com\"},\n        )\n        print(\"Final output:\\n\\n\", result.final_output)\n    except AuthorizationError as e:\n        print(\"Please Login to Github:\", e)\n\nif __name__ == \"__main__\":\n    import asyncio\n\n    asyncio.run(main())\n</code></pre>"},{"location":"#resources","title":"Resources","text":"<ul> <li>Arcade Documentation</li> <li>Arcade Integrations</li> <li>Arcade Python Client</li> <li>OpenAI Agents</li> </ul>"},{"location":"#license","title":"License","text":"<p>This project is licensed under the MIT License - see the LICENSE file for details.</p>"},{"location":"contributing/","title":"Contributing to Agents Arcade","text":"<p>Thank you for your interest in contributing to Agents Arcade! This document provides guidelines and instructions for contributing to the project.</p>"},{"location":"contributing/#getting-started","title":"Getting Started","text":""},{"location":"contributing/#prerequisites","title":"Prerequisites","text":"<ul> <li>Python 3.9 or higher</li> <li>Git</li> <li>A GitHub account</li> </ul>"},{"location":"contributing/#development-setup","title":"Development Setup","text":"<ol> <li>Fork the repository on GitHub</li> <li>Clone your fork locally:     <pre><code>git clone https://github.com/your-username/agents-arcade.git\ncd agents-arcade\n</code></pre></li> <li>Create a virtual environment and install dependencies:     <pre><code>python -m venv .venv\nsource .venv/bin/activate  # On Windows: .venv\\Scripts\\activate\npip install -e \".[dev]\"\n</code></pre></li> </ol>"},{"location":"contributing/#development-workflow","title":"Development Workflow","text":""},{"location":"contributing/#branching-strategy","title":"Branching Strategy","text":"<p>We follow a simple branching model:</p> <ul> <li><code>main</code> - the main development branch</li> <li>feature branches - for new features or significant changes</li> <li>bug fix branches - for bug fixes</li> </ul> <p>When working on a new feature or bug fix, create a new branch from <code>main</code>:</p> <pre><code>git checkout -b feature/your-feature-name\n# or\ngit checkout -b fix/your-bug-fix\n</code></pre>"},{"location":"contributing/#coding-standards","title":"Coding Standards","text":"<p>We use the following tools to maintain code quality:</p> <ul> <li>Ruff - for code formatting and linting</li> <li>MyPy - for type checking</li> </ul> <p>Make sure your code passes all checks before submitting a pull request:</p> <pre><code># Run linter\nruff check .\n\n# Run type checker\nmypy agents_arcade\n\n# Run tests\npytest\n</code></pre>"},{"location":"contributing/#commit-messages","title":"Commit Messages","text":"<p>Please write clear and descriptive commit messages that explain the changes you've made. We follow these conventions:</p> <ul> <li>Use present tense (\"Add feature\" not \"Added feature\")</li> <li>First line is a summary (50 chars or less)</li> <li>Reference issues and pull requests where appropriate (\"Fix #123\")</li> </ul>"},{"location":"contributing/#testing","title":"Testing","text":"<p>Please add tests for any new features or bug fixes. We use pytest for testing:</p> <pre><code># Run all tests\npytest\n\n# Run specific tests\npytest tests/test_tools.py\n</code></pre>"},{"location":"contributing/#pull-request-process","title":"Pull Request Process","text":"<ol> <li>Update the documentation with details of any changes to interfaces, new features, etc.</li> <li>Update the README.md or documentation with details of changes if applicable</li> <li>Make sure all tests pass and the code follows our style guidelines</li> <li>Submit a pull request to the <code>main</code> branch</li> <li>Wait for review and address any feedback</li> </ol>"},{"location":"contributing/#documentation","title":"Documentation","text":"<p>We use MkDocs with Material theme for our documentation. To run the documentation locally:</p> <pre><code>mkdocs serve\n</code></pre> <p>Then navigate to <code>http://localhost:8000</code> in your browser.</p> <p>Make sure to update the documentation when adding new features or changing existing ones. The documentation source files are in the <code>docs</code> directory.</p>"},{"location":"contributing/#releasing","title":"Releasing","text":"<p>The release process is handled by the maintainers. If you have questions about releasing, please open an issue.</p>"},{"location":"contributing/#code-of-conduct","title":"Code of Conduct","text":"<p>Please be respectful and considerate of others when contributing to this project. We aim to foster an inclusive and welcoming environment.</p>"},{"location":"contributing/#license","title":"License","text":"<p>By contributing to Agents Arcade, you agree that your contributions will be licensed under the project's MIT license.</p>"},{"location":"contributing/#questions","title":"Questions?","text":"<p>If you have any questions or need help with the contribution process, please open an issue or reach out to the maintainers.</p>"},{"location":"api/errors/","title":"Errors API Reference","text":"<p>This page documents the API for the <code>agents_arcade.errors</code> module, which defines custom exceptions for error handling in the Agents Arcade integration.</p>"},{"location":"api/errors/#exceptions","title":"Exceptions","text":""},{"location":"api/errors/#toolerror","title":"<code>ToolError</code>","text":"<pre><code>class ToolError(AgentsException)\n</code></pre> <p>Exception raised when an Arcade tool execution fails. This exception is raised when a tool returns an unsuccessful response.</p>"},{"location":"api/errors/#attributes","title":"Attributes","text":"<ul> <li><code>result</code> (<code>ExecuteToolResponse</code>): The ExecuteToolResponse object containing error details.</li> </ul>"},{"location":"api/errors/#properties","title":"Properties","text":"<ul> <li><code>message</code> (<code>str</code>): A human-readable error message extracted from the response.</li> </ul>"},{"location":"api/errors/#methods","title":"Methods","text":"<ul> <li><code>__str__()</code>: Returns a formatted error message including the tool name and error details.</li> </ul>"},{"location":"api/errors/#example","title":"Example","text":"<pre><code>from agents_arcade.errors import ToolError\nfrom agents import Runner\n\ntry:\n    result = await Runner.run(\n        starting_agent=agent,\n        input=\"Perform some action with a tool\",\n        context={\"user_id\": \"user@example.com\"},\n    )\nexcept ToolError as e:\n    print(f\"Tool execution failed: {e}\")\n    print(f\"Error message: {e.message}\")\n</code></pre>"},{"location":"api/errors/#authorizationerror","title":"<code>AuthorizationError</code>","text":"<pre><code>class AuthorizationError(AgentsException)\n</code></pre> <p>Exception raised when authorization for an Arcade tool fails or is required. This exception includes a URL that the user should visit to complete the authorization process.</p>"},{"location":"api/errors/#attributes_1","title":"Attributes","text":"<ul> <li><code>result</code> (<code>AuthorizationResponse</code>): The AuthorizationResponse object containing authorization details.</li> </ul>"},{"location":"api/errors/#properties_1","title":"Properties","text":"<ul> <li><code>message</code> (<code>str</code>): A human-readable message indicating that authorization is required, including the authorization URL.</li> </ul>"},{"location":"api/errors/#methods_1","title":"Methods","text":"<ul> <li><code>__str__()</code>: Returns the authorization error message.</li> </ul>"},{"location":"api/errors/#example_1","title":"Example","text":"<pre><code>from agents_arcade.errors import AuthorizationError\nfrom agents import Runner\n\ntry:\n    result = await Runner.run(\n        starting_agent=agent,\n        input=\"Perform some action with a tool\",\n        context={\"user_id\": \"user@example.com\"},\n    )\nexcept AuthorizationError as e:\n    print(f\"Authorization required: {e}\")\n    # The URL to authorize is in e.result.url\n    print(f\"Please visit this URL to authorize: {e.result.url}\")\n</code></pre>"},{"location":"api/errors/#error-handling","title":"Error Handling","text":"<p>When using Agents Arcade tools, it's important to handle these exceptions appropriately:</p> <pre><code>from agents import Runner, Agent\nfrom agents_arcade import get_arcade_tools\nfrom agents_arcade.errors import ToolError, AuthorizationError\n\nasync def run_agent_with_tools():\n    tools = await get_arcade_tools(toolkits=[\"github\"])\n    agent = Agent(\n        name=\"GitHub agent\",\n        instructions=\"You are a helpful assistant that can assist with GitHub API calls.\",\n        model=\"gpt-4o-mini\",\n        tools=tools,\n    )\n\n    try:\n        result = await Runner.run(\n            starting_agent=agent,\n            input=\"List my GitHub repositories\",\n            context={\"user_id\": \"user@example.com\"},\n        )\n        return result.final_output\n    except AuthorizationError as e:\n        # Handle authorization requirement\n        print(f\"Please authorize: {e}\")\n        return f\"Authorization required. Please visit: {e.result.url}\"\n    except ToolError as e:\n        # Handle tool execution failure\n        print(f\"Tool error: {e}\")\n        return f\"Error executing tool: {e.message}\"\n</code></pre>"},{"location":"api/tools/","title":"Tools API Reference","text":"<p>This page documents the API for the <code>agents_arcade.tools</code> module, which provides integration between OpenAI Agents and Arcade tools.</p>"},{"location":"api/tools/#functions","title":"Functions","text":""},{"location":"api/tools/#get_arcade_tools","title":"<code>get_arcade_tools</code>","text":"<pre><code>async def get_arcade_tools(\n    client: AsyncArcade | None = None,\n    toolkits: list[str] | None = None,\n    tools: list[str] | None = None,\n    **kwargs: dict[str, Any],\n) -&gt; list[FunctionTool]\n</code></pre> <p>Asynchronously fetches Arcade tools and converts them into OpenAI Agent-compatible FunctionTool objects.</p> <p>Not all tools require authentication</p> <p>While many Arcade tools require user authentication, some don't. The <code>get_arcade_tools</code> function automatically handles the distinction.</p>"},{"location":"api/tools/#parameters","title":"Parameters","text":"<ul> <li><code>client</code> (<code>AsyncArcade | None</code>): Optional AsyncArcade client. If not provided, one will be created using environment variables or the provided kwargs.</li> <li><code>toolkits</code> (<code>list[str] | None</code>): Optional list of toolkit names to fetch tools from (e.g., <code>[\"github\", \"google\"]</code>).</li> <li><code>tools</code> (<code>list[str] | None</code>): Optional list of specific tool names to include. If None, all tools from the specified toolkits are included.</li> <li><code>**kwargs</code> (<code>dict[str, Any]</code>): Additional arguments passed to <code>get_arcade_client</code> if a client is not provided.</li> </ul>"},{"location":"api/tools/#returns","title":"Returns","text":"<ul> <li><code>list[FunctionTool]</code>: A list of <code>FunctionTool</code> objects that can be used with OpenAI Agents.</li> </ul>"},{"location":"api/tools/#exceptions","title":"Exceptions","text":"<ul> <li><code>ValueError</code>: If no API key is provided and the environment variable is not set.</li> <li>Authentication errors are not raised here but when the tools are used.</li> </ul>"},{"location":"api/tools/#example","title":"Example","text":"<pre><code>from agents_arcade import get_arcade_tools\nfrom arcadepy import AsyncArcade\n\n# Get all tools from a specific toolkit\nclient = AsyncArcade()\ntools = await get_arcade_tools(client, toolkits=[\"github\"])\n\n# Get specific tools\ntools = await get_arcade_tools(\n    client,\n    tools=[\"github_get_issues\", \"github_get_repository\"]\n)\n\n# Create a client with a specific API key and base URL\ntools = await get_arcade_tools(\n    None,  # No client provided, will create one with the kwargs\n    toolkits=[\"google\"],\n    api_key=\"your_api_key\",\n    base_url=\"https://api.arcade.dev\"\n)\n</code></pre>"},{"location":"api/tools/#internal-functions","title":"Internal Functions","text":"<p>These functions are used internally by the library and are not typically called directly.</p>"},{"location":"api/tools/#_async_invoke_arcade_tool","title":"<code>_async_invoke_arcade_tool</code>","text":"<pre><code>async def _async_invoke_arcade_tool(\n    context: RunContextWrapper,\n    tool_args: str,\n    tool_name: str,\n    requires_auth: bool,\n    client: AsyncArcade,\n)\n</code></pre> <p>Internal function used to execute Arcade tools. Handles authorization when required and processes tool execution results.</p>"},{"location":"api/tools/#_authorize_tool","title":"<code>_authorize_tool</code>","text":"<pre><code>async def _authorize_tool(client: AsyncArcade, context: RunContextWrapper, tool_name: str)\n</code></pre> <p>Internal function to authorize a tool for a specific user. Raises appropriate exceptions if authorization fails.</p>"},{"location":"api/utils/","title":"Utils API Reference","text":"<p>This page documents the API for the <code>agents_arcade._utils</code> module, which provides utility functions for working with the Arcade API.</p>"},{"location":"api/utils/#functions","title":"Functions","text":""},{"location":"api/utils/#get_arcade_client","title":"<code>get_arcade_client</code>","text":"<pre><code>def get_arcade_client(\n    base_url: str = \"https://api.arcade.dev\",\n    api_key: str = os.getenv(\"ARCADE_API_KEY\", None),\n    **kwargs: dict[str, Any],\n) -&gt; AsyncArcade\n</code></pre> <p>Creates and returns an AsyncArcade client.</p>"},{"location":"api/utils/#parameters","title":"Parameters","text":"<ul> <li><code>base_url</code> (<code>str</code>): The base URL for the Arcade API. Default is \"https://api.arcade.dev\".</li> <li><code>api_key</code> (<code>str</code>): The Arcade API key. If not provided, it will be read from the <code>ARCADE_API_KEY</code> environment variable.</li> <li><code>**kwargs</code> (<code>dict[str, Any]</code>): Additional arguments to pass to the AsyncArcade constructor.</li> </ul>"},{"location":"api/utils/#returns","title":"Returns","text":"<ul> <li><code>AsyncArcade</code>: An initialized AsyncArcade client.</li> </ul>"},{"location":"api/utils/#raises","title":"Raises","text":"<ul> <li><code>ValueError</code>: If no API key is provided and the environment variable is not set.</li> </ul>"},{"location":"api/utils/#example","title":"Example","text":"<pre><code>from agents_arcade._utils import get_arcade_client\n\n# Using environment variable for API key\nclient = get_arcade_client()\n\n# Explicitly providing API key\nclient = get_arcade_client(api_key=\"your_api_key_here\")\n\n# Custom base URL (e.g., for staging environment)\nclient = get_arcade_client(base_url=\"https://api.staging.arcade.dev\")\n</code></pre>"},{"location":"api/utils/#_get_arcade_tool_definitions","title":"<code>_get_arcade_tool_definitions</code>","text":"<pre><code>async def _get_arcade_tool_definitions(\n    client: AsyncArcade,\n    toolkits: list[str],\n    tools: list[str] | None = None\n) -&gt; dict[str, bool]\n</code></pre> <p>Asynchronously fetches tool definitions from specified toolkits and determines which tools require authorization.</p>"},{"location":"api/utils/#parameters_1","title":"Parameters","text":"<ul> <li><code>client</code> (<code>AsyncArcade</code>): AsyncArcade client to use for API requests.</li> <li><code>toolkits</code> (<code>list[str]</code>): List of toolkit names to fetch tools from.</li> <li><code>tools</code> (<code>list[str] | None</code>): Optional list of specific tool names to include. If None, all tools are included.</li> </ul>"},{"location":"api/utils/#returns_1","title":"Returns","text":"<ul> <li><code>dict[str, bool]</code>: A dictionary mapping tool names to booleans indicating whether each tool requires authorization.</li> </ul>"},{"location":"api/utils/#convert_output_to_json","title":"<code>convert_output_to_json</code>","text":"<pre><code>def convert_output_to_json(output: Any) -&gt; str\n</code></pre> <p>Converts tool output to a JSON string.</p>"},{"location":"api/utils/#parameters_2","title":"Parameters","text":"<ul> <li><code>output</code> (<code>Any</code>): Any value to convert to JSON.</li> </ul>"},{"location":"api/utils/#returns_2","title":"Returns","text":"<ul> <li><code>str</code>: A JSON string representation of the output. If the input is already a dict or list, it's converted to JSON. Otherwise, it's converted to a string.</li> </ul>"},{"location":"api/utils/#example_1","title":"Example","text":"<pre><code>from agents_arcade._utils import convert_output_to_json\n\n# Convert a dictionary to JSON\nresult = convert_output_to_json({\"name\": \"John\", \"age\": 30})\n# '{\"name\": \"John\", \"age\": 30}'\n\n# Convert a list to JSON\nresult = convert_output_to_json([1, 2, 3])\n# '[1, 2, 3]'\n\n# Convert a non-JSON value to string\nresult = convert_output_to_json(\"Hello\")\n# 'Hello'\n</code></pre>"},{"location":"examples/email/","title":"Email Agent Example","text":"<p>This example demonstrates how to create an agent that can access and manage Gmail using Arcade tools.</p>"},{"location":"examples/email/#prerequisites","title":"Prerequisites","text":"<p>Before running this example, make sure you have:</p> <ol> <li>Installed <code>agents-arcade</code> (see Installation)</li> <li>An Arcade API key (sign up at arcade.dev if you don't have one)</li> <li>An OpenAI API Key.</li> <li>Set the <code>ARCADE_API_KEY</code> environment variable or have your API key ready to use</li> <li>Set the <code>OPENAI_API_KEY</code> environment variable or have your API key ready to use</li> </ol>"},{"location":"examples/email/#basic-email-agent","title":"Basic Email Agent","text":"<p>Here's a complete example of an email agent that can interact with Gmail:</p> <pre><code>from agents import Agent, Runner\nfrom arcadepy import AsyncArcade\n\nfrom agents_arcade import get_arcade_tools\nfrom agents_arcade.errors import AuthorizationError\n\n\nasync def main():\n    # Create an Arcade client\n    client = AsyncArcade()\n\n    # Get Google tools from Arcade (includes Gmail)\n    tools = await get_arcade_tools(client, toolkits=[\"google\"])\n\n    # Create an OpenAI agent with Google tools\n    google_agent = Agent(\n        name=\"Google agent\",\n        instructions=\"You are a helpful assistant that can assist with Gmail and other Google services.\",\n        model=\"gpt-4o-mini\",\n        tools=tools,\n    )\n\n    try:\n        # Run the agent with a specific task\n        result = await Runner.run(\n            starting_agent=google_agent,\n            input=\"What are my latest emails?\",\n            # A unique user_id is required for Google authorization\n            context={\"user_id\": \"user@example.com\"},\n        )\n        print(\"Final output:\\n\\n\", result.final_output)\n    except AuthorizationError as e:\n        # Handle authorization errors\n        print(\"Please Login to Google:\", e)\n\n\nif __name__ == \"__main__\":\n    import asyncio\n\n    asyncio.run(main())\n</code></pre> <p>Save this as <code>email_agent.py</code> and run it with <code>python email_agent.py</code>.</p>"},{"location":"examples/email/#what-this-example-does","title":"What This Example Does","text":"<ol> <li>Creates an Arcade client using your API key</li> <li>Fetches Google tools from Arcade (which include Gmail tools)</li> <li>Creates an OpenAI agent with access to those tools</li> <li>Runs the agent with a specific task (\"What are my latest emails?\")</li> <li>Handles any authorization errors that might occur</li> </ol>"},{"location":"examples/email/#authentication-process","title":"Authentication Process","text":"<p>If this is your first time using the Google toolkit with your user ID, you will see a message like:</p> <pre><code>Please Login to Google: Authorization required: https://accounts.google.com/o/oauth2/auth...\n</code></pre> <p>Open this URL in your browser and complete the Google authorization process. After authorizing, you can run the script again, and it should work without requiring authentication.</p>"},{"location":"examples/email/#common-email-tasks","title":"Common Email Tasks","text":"<p>Your email agent can perform a wide range of Gmail-related tasks. Here are some example prompts you can try:</p> <ul> <li>\"What are my latest emails?\"</li> <li>\"Send an email to example@example.com with the subject 'Hello' and body 'How are you?'\"</li> <li>\"Show me unread emails from the last week\"</li> <li>\"Find emails with attachments\"</li> <li>\"Summarize emails from a specific sender\"</li> <li>\"Draft a reply to my most recent email\"</li> </ul>"},{"location":"examples/email/#available-google-tools","title":"Available Google Tools","text":"<p>The Google toolkit includes tools for:</p> <ul> <li>Gmail (read, send, search, draft)</li> <li>Google Drive (list, create, read files)</li> <li>Google Calendar (list, create, update events)</li> <li>Google Docs (create, read, update)</li> <li>Google Sheets (read, update)</li> <li>And more</li> </ul>"},{"location":"examples/email/#advanced-usage","title":"Advanced Usage","text":""},{"location":"examples/email/#email-only-agent","title":"Email-Only Agent","text":"<p>If you only want to include Gmail-related tools and not other Google services:</p> <pre><code>tools = await get_arcade_tools(\n    client,\n    tools=[\n        \"google_gmail_get_messages\",\n        \"google_gmail_send_message\",\n        \"google_gmail_search_messages\"\n    ]\n)\n</code></pre>"},{"location":"examples/email/#email-assistant-with-specific-instructions","title":"Email Assistant with Specific Instructions","text":"<p>For a more specialized email assistant:</p> <pre><code>email_agent = Agent(\n    name=\"Email Assistant\",\n    instructions=\"\"\"You are a specialized email assistant.\n    You can help read, summarize, and compose emails.\n    When asked to send an email, always confirm the recipient, subject, and content.\n    When summarizing emails, focus on the most important information.\n    Be concise and professional in your responses.\"\"\",\n    model=\"gpt-4o-mini\",\n    tools=tools,\n)\n</code></pre>"},{"location":"examples/email/#combining-with-other-toolkits","title":"Combining with Other Toolkits","text":"<p>You can combine Google tools with other Arcade toolkits for a more versatile agent:</p> <pre><code>tools = await get_arcade_tools(client, toolkits=[\"google\", \"github\", \"linkedin\"])\n</code></pre> <p>This creates an agent that can handle emails, GitHub tasks, and LinkedIn interactions in a single conversation.</p>"},{"location":"examples/github/","title":"GitHub Integration Example","text":"<p>This example shows how to create an agent that can interact with GitHub using Arcade tools.</p>"},{"location":"examples/github/#prerequisites","title":"Prerequisites","text":"<p>Before running this example, make sure you have:</p> <ol> <li>Installed <code>agents-arcade</code> (see Installation)</li> <li>An Arcade API key (sign up at arcade.dev if you don't have one)</li> <li>An OpenAI API Key.</li> <li>Set the <code>ARCADE_API_KEY</code> environment variable or have your API key ready to use</li> <li>Set the <code>OPENAI_API_KEY</code> environment variable or have your API key ready to use</li> </ol>"},{"location":"examples/github/#basic-github-agent","title":"Basic GitHub Agent","text":"<p>Here's a complete example of a GitHub agent that can interact with the GitHub API:</p> <pre><code>from agents import Agent, Runner\nfrom arcadepy import AsyncArcade\n\nfrom agents_arcade import get_arcade_tools\nfrom agents_arcade.errors import AuthorizationError\n\n\nasync def main():\n    # Create an Arcade client\n    client = AsyncArcade()\n\n    # Get GitHub tools from Arcade\n    tools = await get_arcade_tools(client, toolkits=[\"github\"])\n\n    # Create an OpenAI agent with the GitHub tools\n    github_agent = Agent(\n        name=\"GitHub agent\",\n        instructions=\"You are a helpful assistant that can assist with GitHub API calls.\",\n        model=\"gpt-4o-mini\",\n        tools=tools,\n    )\n\n    try:\n        # Run the agent with a specific task\n        result = await Runner.run(\n            starting_agent=github_agent,\n            input=\"Star the arcadeai/arcade-ai repo\",\n            # A unique user_id is required for GitHub authorization\n            context={\"user_id\": \"user@example.com\"},\n        )\n        print(\"Final output:\\n\\n\", result.final_output)\n    except AuthorizationError as e:\n        # Handle authorization errors\n        print(\"Please Login to Github:\", e)\n\n\nif __name__ == \"__main__\":\n    import asyncio\n\n    asyncio.run(main())\n</code></pre> <p>Save this as <code>github_example.py</code> and run it with <code>python github_example.py</code>.</p>"},{"location":"examples/github/#what-this-example-does","title":"What This Example Does","text":"<ol> <li>Creates an Arcade client using your API key</li> <li>Fetches GitHub tools from Arcade</li> <li>Creates an OpenAI agent with access to those tools</li> <li>Runs the agent with a specific task (\"Star the arcadeai/arcade-ai repo\")</li> <li>Handles any authorization errors that might occur</li> </ol>"},{"location":"examples/github/#authentication-process","title":"Authentication Process","text":"<p>If this is your first time using the GitHub toolkit with your user ID, you will see a message like:</p> <pre><code>Please Login to Github: Authorization required: https://github.com/login/oauth/authorize...\n</code></pre> <p>Open this URL in your browser and complete the GitHub authorization process. After authorizing, you can run the script again, and it should work without requiring authentication.</p>"},{"location":"examples/github/#common-github-tasks","title":"Common GitHub Tasks","text":"<p>Your GitHub agent can perform a wide range of tasks. Here are some example prompts you can try:</p> <ul> <li>\"List my GitHub repositories\"</li> <li>\"Create a new repository named 'test-repo'\"</li> <li>\"Get information about the openai/openai-python repository\"</li> <li>\"List open issues in the huggingface/transformers repository\"</li> <li>\"Create a new issue in my test-repo repository\"</li> </ul>"},{"location":"examples/github/#available-github-tools","title":"Available GitHub Tools","text":"<p>The GitHub toolkit includes tools for:</p> <ul> <li>Repository management (create, get, list, delete)</li> <li>Issue management (create, get, list, update)</li> <li>Pull request operations</li> <li>Star/unstar repositories</li> <li>User information</li> <li>And more</li> </ul>"},{"location":"examples/github/#advanced-usage","title":"Advanced Usage","text":""},{"location":"examples/github/#filtering-tools","title":"Filtering Tools","text":"<p>If you only need specific GitHub tools, you can include only what you need:</p> <pre><code>tools = await get_arcade_tools(\n    client,\n    tools=[\"github_get_repository\", \"github_list_user_repositories\"]\n)\n</code></pre>"},{"location":"examples/github/#combining-with-other-toolkits","title":"Combining with Other Toolkits","text":"<p>You can combine GitHub tools with other Arcade toolkits:</p> <pre><code>tools = await get_arcade_tools(client, toolkits=[\"github\", \"google\", \"linkedin\"])\n</code></pre>"},{"location":"examples/github/#custom-instructions","title":"Custom Instructions","text":"<p>For more targeted GitHub tasks, you can customize the agent's instructions:</p> <pre><code>github_agent = Agent(\n    name=\"GitHub Repository Manager\",\n    instructions=\"\"\"You are a specialized GitHub repository manager.\n    You can help users manage their repositories, issues, and pull requests.\n    Always ask for clarification if the repository name is not specified.\n    When creating issues or PRs, ask for all necessary details.\"\"\",\n    model=\"gpt-4o-mini\",\n    tools=tools,\n)\n</code></pre>"},{"location":"examples/multi-toolkit/","title":"Combining Multiple Toolkits","text":"<p>This example demonstrates how to create an agent that combines multiple Arcade toolkits to provide a powerful multi-service assistant.</p>"},{"location":"examples/multi-toolkit/#overview","title":"Overview","text":"<p>One of the most powerful features of Agents Arcade is the ability to combine multiple toolkits in a single agent. This example shows how to create an agent that can:</p> <ol> <li>Access GitHub repositories and issues</li> <li>Read and send emails via Gmail</li> <li>Search the web for information</li> </ol>"},{"location":"examples/multi-toolkit/#prerequisites","title":"Prerequisites","text":"<p>Before running this example, make sure you have:</p> <ol> <li>Installed <code>agents-arcade</code> (see Installation)</li> <li>An Arcade API key (sign up at arcade.dev if you don't have one)</li> <li>An OpenAI API Key.</li> <li>Set the <code>ARCADE_API_KEY</code> environment variable or have your API key ready to use</li> <li>Set the <code>OPENAI_API_KEY</code> environment variable or have your API key ready to use</li> <li>Have access to the GitHub, Google, and Web toolkits in your Arcade subscription</li> </ol>"},{"location":"examples/multi-toolkit/#multi-toolkit-agent","title":"Multi-Toolkit Agent","text":"<p>Here's a complete example of a multi-toolkit agent:</p> <pre><code>from agents import Agent, Runner\nfrom arcadepy import AsyncArcade\n\nfrom agents_arcade import get_arcade_tools\nfrom agents_arcade.errors import AuthorizationError\n\n\nasync def main():\n    # Create an Arcade client\n    client = AsyncArcade()\n\n    # Get tools from multiple toolkits\n    tools = await get_arcade_tools(\n        client,\n        toolkits=[\"github\", \"google\", \"web\"]\n    )\n\n    # Create an agent with custom instructions that reference all capabilities\n    multi_agent = Agent(\n        name=\"Multi-service Assistant\",\n        instructions=\"\"\"You are a helpful assistant that can:\n        1. Access GitHub repositories, issues, and pull requests\n        2. Read and send emails via Gmail\n        3. Search the web for information\n\n        For GitHub tasks: Use the github_* tools to interact with GitHub\n        For email tasks: Use the google_gmail_* tools to read or send emails\n        For web searches: Use the web_search tool to find information online\n\n        Always use the most appropriate tools for the user's request.\n        If authentication is required for a service, inform the user.\n        \"\"\",\n        model=\"gpt-4o-mini\",\n        tools=tools,\n    )\n\n    try:\n        # Run the agent with a specific multi-service task\n        result = await Runner.run(\n            starting_agent=multi_agent,\n            input=\"\"\"\n            1. Check if there are any open issues in the 'arcadeai/arcade-ai' GitHub repo\n            2. Then search the web for 'agents and tools architectures'\n            3. Finally, draft an email summarizing the findings\n            \"\"\",\n            # A unique user_id is required for authentication\n            context={\"user_id\": \"user@example.com\"},\n        )\n        print(\"Final output:\\n\\n\", result.final_output)\n    except AuthorizationError as e:\n        # Handle authorization errors - might need multiple authorizations\n        print(f\"Authorization required: {e}\")\n        print(f\"Please visit: {e.result.url}\")\n\n\nif __name__ == \"__main__\":\n    import asyncio\n\n    asyncio.run(main())\n</code></pre> <p>Save this as <code>multi_toolkit_example.py</code> and run it with <code>python multi_toolkit_example.py</code>.</p>"},{"location":"examples/multi-toolkit/#authentication-flow","title":"Authentication Flow","text":"<p>When running this example for the first time, you'll need to authenticate with multiple services. The authentication will happen one service at a time:</p> <ol> <li> <p>You might first get a GitHub authentication prompt:</p> <pre><code>Authorization required: https://github.com/login/oauth/authorize...\n</code></pre> </li> <li> <p>After authenticating with GitHub and running again, you might get a Google authentication prompt:</p> <pre><code>Authorization required: https://accounts.google.com/o/oauth2/auth...\n</code></pre> </li> <li> <p>After completing all required authorizations, the agent will be able to execute the tasks.</p> </li> </ol>"},{"location":"examples/multi-toolkit/#handling-multiple-authorizations","title":"Handling Multiple Authorizations","text":"<p>For a better user experience, you can implement a more sophisticated authentication flow:</p> <pre><code>async def run_with_multi_auth():\n    client = AsyncArcade()\n    user_id = \"user@example.com\"\n\n    # Track which services have been authorized\n    auth_status = {\n        \"github\": False,\n        \"google\": False,\n        \"web\": False  # Some web tools might require auth too\n    }\n\n    # Keep trying until all services are authorized\n    while not all(auth_status.values()):\n        try:\n            # Get tools for services not yet authorized\n            toolkits = [tk for tk, status in auth_status.items() if not status]\n            tools = await get_arcade_tools(client, toolkits=toolkits)\n\n            # Create agent with the tools\n            agent = Agent(\n                name=\"Multi-service Assistant\",\n                instructions=\"You are a helpful assistant with multiple service capabilities.\",\n                model=\"gpt-4o-mini\",\n                tools=tools,\n            )\n\n            # Try to run the agent\n            result = await Runner.run(\n                starting_agent=agent,\n                input=\"Test connection to all services\",\n                context={\"user_id\": user_id},\n            )\n\n            # If we get here without an AuthorizationError, all services are authorized\n            print(\"All services successfully authorized!\")\n            auth_status = {tk: True for tk in auth_status}\n\n        except AuthorizationError as e:\n            # Extract the toolkit from the tool name (e.g., github_get_issues -&gt; github)\n            toolkit = e.result.tool_name.split('_')[0]\n\n            print(f\"Authorization required for {toolkit}. Please visit: {e.result.url}\")\n            print(\"Waiting for authorization completion...\")\n\n            # Wait for the user to complete authorization\n            auth_result = await client.wait_for_completion(\n                e.result.authorization_id\n            )\n\n            if auth_result.status == \"completed\":\n                print(f\"{toolkit} authorization completed successfully!\")\n                auth_status[toolkit] = True\n            else:\n                print(f\"{toolkit} authorization failed or timed out.\")\n\n    # Now create the fully authorized agent\n    tools = await get_arcade_tools(client, toolkits=list(auth_status.keys()))\n    return Agent(\n        name=\"Multi-service Assistant\",\n        instructions=\"You are a helpful assistant with multiple service capabilities.\",\n        model=\"gpt-4o-mini\",\n        tools=tools,\n    )\n</code></pre>"},{"location":"examples/multi-toolkit/#advanced-use-cases","title":"Advanced Use Cases","text":"<p>With a multi-toolkit agent, you can build powerful assistants that can perform complex tasks across different services. Here are some example use cases:</p> <ol> <li>Research Assistant: Search the web, save findings to GitHub, and email summaries</li> <li>Project Manager: Track GitHub issues, send email updates, and search for solutions</li> <li>Content Creator: Research topics online, draft content in Google Docs, and share via email</li> <li>Customer Support: Search knowledge bases, check GitHub issues, and respond to customer emails</li> </ol>"},{"location":"examples/multi-toolkit/#conclusion","title":"Conclusion","text":"<p>By combining multiple toolkits, you can create sophisticated agents that seamlessly work across different services. This approach allows you to build truly helpful assistants that can handle complex workflows that span multiple platforms and services.</p>"},{"location":"getting-started/authentication/","title":"Authentication","text":"<p>Many Arcade tools require user authentication to access third-party services like GitHub, Google, LinkedIn, etc. This guide explains how authentication works in <code>agents-arcade</code> and how to implement it properly.</p>"},{"location":"getting-started/authentication/#overview","title":"Overview","text":"<p>The authentication flow in <code>agents-arcade</code> is handled by Arcade and follows this process:</p> <ol> <li>You provide a unique <code>user_id</code> in the agent's context</li> <li>When a tool requires authentication, Arcade checks if the user is already authorized</li> <li>If not authorized, an <code>AuthorizationError</code> is raised with a URL for the user to authenticate</li> <li>After authentication, subsequent calls with the same <code>user_id</code> will be authorized</li> </ol>"},{"location":"getting-started/authentication/#implementing-authentication","title":"Implementing Authentication","text":""},{"location":"getting-started/authentication/#basic-authentication-flow","title":"Basic Authentication Flow","text":"<p>Here's a simple example of handling authentication in your agent:</p> <pre><code>from agents import Agent, Runner\nfrom arcadepy import AsyncArcade\n\nfrom agents_arcade import get_arcade_tools\nfrom agents_arcade.errors import AuthorizationError\n\nasync def main():\n    client = AsyncArcade()\n    tools = await get_arcade_tools(client, toolkits=[\"github\"])\n\n    github_agent = Agent(\n        name=\"GitHub agent\",\n        instructions=\"You are a helpful assistant that can assist with GitHub API calls.\",\n        model=\"gpt-4o-mini\",\n        tools=tools,\n    )\n\n    try:\n        result = await Runner.run(\n            starting_agent=github_agent,\n            input=\"Star the arcadeai/arcade-ai repo\",\n            # Provide a unique user_id for authentication\n            context={\"user_id\": \"user@example.com\"},\n        )\n        print(\"Final output:\", result.final_output)\n    except AuthorizationError as e:\n        # Show the authentication URL to the user\n        print(\"Please login to GitHub:\", e)\n\nif __name__ == \"__main__\":\n    import asyncio\n\n    asyncio.run(main())\n</code></pre>"},{"location":"getting-started/authentication/#waiting-for-authentication","title":"Waiting for Authentication","text":"<p>In some scenarios, you might want to wait for the user to complete the authentication before proceeding. You can use the <code>arcadepy</code> library's authorization helpers for this:</p> <pre><code>from arcadepy import AsyncArcade\nfrom agents_arcade import get_arcade_tools\nfrom agents_arcade.errors import AuthorizationError\n\nasync def main():\n    client = AsyncArcade()\n    user_id = \"user@example.com\"\n\n    try:\n        # Try to use a tool that requires auth\n        tools = await get_arcade_tools(client, toolkits=[\"github\"])\n\n        # Attempt to run your agent...\n    except AuthorizationError as e:\n        # Get the auth URL from the error\n        auth_url = e.result.url\n\n        # Show URL to user\n        print(f\"Please authorize access at: {auth_url}\")\n\n        # Wait for the user to complete authorization\n        authorization = await client.wait_for_completion(\n            e.result.authorization_id)\n\n        if authorization.status == \"completed\":\n            print(\"Authorization completed successfully!\")\n            # Try again with the authorized user\n            # ...\n\nif __name__ == \"__main__\":\n    import asyncio\n\n    asyncio.run(main())\n</code></pre>"},{"location":"getting-started/authentication/#user-id-best-practices","title":"User ID Best Practices","text":"<p>The <code>user_id</code> is crucial for authentication as it links tool authorizations to specific users:</p> <ul> <li>Use a consistent identifier: Use the same <code>user_id</code> for the same user across sessions</li> <li>Make it unique: Ensure each user has a unique identifier to avoid authorization conflicts</li> <li>Privacy considerations: Consider using hashed or anonymized IDs if privacy is a concern</li> <li>Persistent storage: Store authorized user IDs securely to maintain the user's authorization state</li> </ul>"},{"location":"getting-started/authentication/#managing-multiple-users","title":"Managing Multiple Users","text":"<p>If your application serves multiple users, you should maintain a mapping between your internal user identifiers and the user IDs you provide to Arcade.</p>"},{"location":"getting-started/authentication/#revoking-access","title":"Revoking Access","text":"<p>Users can revoke access to their accounts from the third-party service's settings (e.g., GitHub settings). When access is revoked, the next tool call will raise an <code>AuthorizationError</code> again, prompting re-authentication.</p>"},{"location":"getting-started/authentication/#troubleshooting","title":"Troubleshooting","text":""},{"location":"getting-started/authentication/#common-issues","title":"Common Issues","text":"<ul> <li>Authentication URL not working: Ensure your Arcade API key has the correct permissions</li> <li>Authorization expired: Third-party tokens can expire; handle <code>AuthorizationError</code> to re-authenticate</li> <li>Authorization stuck: If authorization seems stuck, check if the timeout value is appropriate</li> </ul>"},{"location":"getting-started/authentication/#debugging-authentication","title":"Debugging Authentication","text":"<p>You can enable debug logging in <code>arcadepy</code> to see more detailed information about the authentication process:</p> <pre><code>import logging\nlogging.basicConfig(level=logging.DEBUG)\n</code></pre>"},{"location":"getting-started/installation/","title":"Installation","text":"<p>This guide covers how to install the <code>agents-arcade</code> package and its dependencies.</p>"},{"location":"getting-started/installation/#requirements","title":"Requirements","text":"<ul> <li>Python 3.9 or higher</li> <li><code>openai-agents</code> 0.0.4 or higher</li> <li><code>arcadepy</code> 1.3.0 or higher</li> </ul>"},{"location":"getting-started/installation/#installation-options","title":"Installation Options","text":""},{"location":"getting-started/installation/#pip","title":"pip","text":"<p>The recommended way to install <code>agents-arcade</code> is using pip:</p> <pre><code>pip install agents-arcade\n</code></pre>"},{"location":"getting-started/installation/#from-source","title":"From Source","text":"<p>You can also install the latest version directly from the GitHub repository:</p> <pre><code>git clone https://github.com/ArcadeAI/agents-arcade.git\ncd agents-arcade\npip install -e .\n</code></pre>"},{"location":"getting-started/installation/#development-installation","title":"Development Installation","text":"<p>If you're contributing to <code>agents-arcade</code> or need the development dependencies:</p> <pre><code>git clone https://github.com/ArcadeAI/agents-arcade.git\ncd agents-arcade\npip install -e \".[dev]\"\n</code></pre>"},{"location":"getting-started/installation/#verify-installation","title":"Verify Installation","text":"<p>You can verify that the installation was successful by importing the package in Python:</p> <pre><code>from agents_arcade import get_arcade_tools\nprint(\"Installation successful!\")\n</code></pre>"},{"location":"getting-started/installation/#next-steps","title":"Next Steps","text":"<p>Now that you have <code>agents-arcade</code> installed, you can:</p> <ul> <li>Check out the Quickstart Guide to create your first agent</li> <li>Learn about Authentication for Arcade tools</li> <li>Explore the available toolkits</li> </ul>"},{"location":"getting-started/quickstart/","title":"Quickstart Guide","text":"<p>This guide will help you get started with creating an agent that uses Arcade tools. We'll create a simple GitHub agent that can interact with the GitHub API.</p>"},{"location":"getting-started/quickstart/#prerequisites","title":"Prerequisites","text":"<p>Before you begin, make sure you have:</p> <ol> <li>Installed <code>agents-arcade</code> (see Installation)</li> <li>An Arcade API key (sign up at arcade.dev if you don't have one)</li> <li>An OpenAI API Key.</li> <li>Set the <code>ARCADE_API_KEY</code> environment variable or have your API key ready to use</li> <li>Set the <code>OPENAI_API_KEY</code> environment variable or have your API key ready to use</li> </ol>"},{"location":"getting-started/quickstart/#create-a-basic-agent","title":"Create a Basic Agent","text":"<p>Below is a simple example of creating an agent that can use GitHub tools:</p> <pre><code>from agents import Agent, Runner\nfrom arcadepy import AsyncArcade\n\nfrom agents_arcade import get_arcade_tools\nfrom agents_arcade.errors import AuthorizationError\n\n\nasync def main():\n    # Create an Arcade client - either supply the API key or use ARCADE_API_KEY env var\n    client = AsyncArcade()\n\n    # Get GitHub tools from Arcade\n    tools = await get_arcade_tools(client, toolkits=[\"github\"])\n\n    # Create an OpenAI agent with the GitHub tools\n    github_agent = Agent(\n        name=\"GitHub agent\",\n        instructions=\"You are a helpful assistant that can assist with GitHub API calls.\",\n        model=\"gpt-4o-mini\", # You can use any OpenAI model here\n        tools=tools,\n    )\n\n    try:\n        # Run the agent with a specific task\n        result = await Runner.run(\n            starting_agent=github_agent,\n            input=\"Show me issues from the openai/openai-python repository\",\n            # A unique user_id is required for authorization\n            context={\"user_id\": \"your-unique-user-id\"},\n        )\n        print(\"Final output:\\n\\n\", result.final_output)\n    except AuthorizationError as e:\n        # Handle authorization errors\n        print(\"Please login to GitHub:\", e)\n\n\nif __name__ == \"__main__\":\n    import asyncio\n\n    asyncio.run(main())\n</code></pre>"},{"location":"getting-started/quickstart/#handle-authentication","title":"Handle Authentication","text":"<p>If this is your first time using a particular Arcade toolkit with your user ID, you will see an authorization URL:</p> <pre><code>Please login to GitHub: Authorization required: https://github.com/login/oauth/authorize...\n</code></pre> <p>Open this URL in your browser and complete the authorization. After authorizing, you can run your script again, and it should work without requiring authentication again for that user ID.</p>"},{"location":"getting-started/quickstart/#using-other-toolkits","title":"Using Other Toolkits","text":"<p>You can use any of the available Arcade toolkits by specifying them in the <code>get_arcade_tools</code> function:</p> <pre><code># Use the Google toolkit\ntools = await get_arcade_tools(client, toolkits=[\"google\"])\n\n# Use multiple toolkits\ntools = await get_arcade_tools(client, toolkits=[\"github\", \"google\", \"linkedin\"])\n</code></pre>"},{"location":"getting-started/quickstart/#specifying-specific-tools","title":"Specifying Specific Tools","text":"<p>If you want to use only specific tools from a toolkit:</p> <pre><code># Get only specific GitHub tools\ntools = await get_arcade_tools(\n    client,\n    tools=[\"github_get_issues\", \"github_get_repository\"]\n)\n</code></pre>"},{"location":"getting-started/quickstart/#next-steps","title":"Next Steps","text":"<ul> <li>Learn more about Authentication</li> <li>Explore available Toolkits and Tools</li> <li>See more complex Examples</li> <li>Check out the API Reference for advanced usage</li> </ul>"},{"location":"guides/custom-usage/","title":"Advanced &amp; Custom Usage","text":"<p>This guide covers advanced usage patterns and customizations for the <code>agents-arcade</code> library, helping you build more sophisticated agent applications with Arcade tools.</p>"},{"location":"guides/custom-usage/#custom-client-configuration","title":"Custom Client Configuration","text":"<p>You can configure the Arcade client with custom settings:</p> <pre><code>from arcadepy import AsyncArcade\nfrom agents_arcade import get_arcade_tools\n\n# Custom base URL (e.g., for staging environment)\nclient = AsyncArcade(\n    base_url=\"https://api.staging.arcade.dev\",\n    api_key=\"your_api_key\",\n    timeout=30  # Custom timeout in seconds\n)\n\n# Get tools using the custom client\ntools = await get_arcade_tools(client, toolkits=[\"github\"])\n</code></pre> <p>Alternatively, you can pass configuration directly to <code>get_arcade_tools</code>:</p> <pre><code>tools = await get_arcade_tools(\n    client=None,  # No client provided, will create one with the kwargs\n    toolkits=[\"github\"],\n    base_url=\"https://api.staging.arcade.dev\",\n    api_key=\"your_api_key\",\n    timeout=30\n)\n</code></pre>"},{"location":"guides/custom-usage/#building-multi-agent-systems","title":"Building Multi-Agent Systems","text":"<p>You can create multiple specialized agents with different tools:</p> <pre><code>from agents import Agent, Runner, Message\n\n# Create specialized agents\ngithub_tools = await get_arcade_tools(client, toolkits=[\"github\"])\ngithub_agent = Agent(\n    name=\"GitHub Specialist\",\n    instructions=\"You are a GitHub expert. Help users with GitHub tasks.\",\n    model=\"gpt-4o-mini\",\n    tools=github_tools,\n)\n\ngoogle_tools = await get_arcade_tools(client, toolkits=[\"google\"])\ngoogle_agent = Agent(\n    name=\"Google Workspace Specialist\",\n    instructions=\"You are a Google Workspace expert. Help users with Gmail, Drive, etc.\",\n    model=\"gpt-4o-mini\",\n    tools=google_tools,\n)\n\n# Create a coordinator agent\ncoordinator = Agent(\n    name=\"Coordinator\",\n    instructions=\"\"\"You are a coordination agent. Based on the user's request,\n    determine whether to route to the GitHub Specialist or Google Workspace Specialist.\n    For GitHub tasks: {{ to: \"GitHub Specialist\", task: \"specific github task\" }}\n    For Google tasks: {{ to: \"Google Workspace Specialist\", task: \"specific google task\" }}\n    \"\"\",\n    model=\"gpt-4o-mini\",\n)\n\n# Set up the agent network\ncoordinator.add_tool_agent(github_agent)\ncoordinator.add_tool_agent(google_agent)\n\n# Run with a single context for authentication\nresult = await Runner.run(\n    starting_agent=coordinator,\n    input=\"Create a GitHub repository and then send an email about it\",\n    context={\"user_id\": \"user@example.com\"},\n)\n</code></pre>"},{"location":"guides/custom-usage/#customizing-tool-behavior","title":"Customizing Tool Behavior","text":"<p>You can create custom tool wrappers to add functionality:</p> <pre><code>from agents.tool import FunctionTool\nfrom functools import partial\n\n# Get the original tools\noriginal_tools = await get_arcade_tools(client, toolkits=[\"github\"])\n\n# Create enhanced versions with logging and error handling\nenhanced_tools = []\nfor tool in original_tools:\n    # Create a wrapped version of the tool's invoke function\n    async def wrapped_invoke(context, tool_args, original_invoke):\n        print(f\"[LOG] Executing tool: {tool.name} with args: {tool_args}\")\n        try:\n            result = await original_invoke(context, tool_args)\n            print(f\"[LOG] Tool {tool.name} completed successfully\")\n            return result\n        except Exception as e:\n            print(f\"[ERROR] Tool {tool.name} failed: {e}\")\n            raise\n\n    # Create a new tool with the wrapped invoke function\n    enhanced_tool = FunctionTool(\n        name=tool.name,\n        description=tool.description,\n        params_json_schema=tool.params_json_schema,\n        on_invoke_tool=partial(wrapped_invoke, original_invoke=tool.on_invoke_tool),\n        strict_json_schema=tool.strict_json_schema,\n    )\n    enhanced_tools.append(enhanced_tool)\n\n# Use the enhanced tools\nagent = Agent(\n    name=\"GitHub agent\",\n    instructions=\"You are a helpful assistant that can assist with GitHub API calls.\",\n    model=\"gpt-4o-mini\",\n    tools=enhanced_tools,\n)\n</code></pre>"},{"location":"guides/custom-usage/#building-web-applications","title":"Building Web Applications","text":"<p>Here's an example of integrating <code>agents-arcade</code> with a FastAPI web application:</p> <pre><code>from fastapi import FastAPI, BackgroundTasks, HTTPException, Depends\nfrom fastapi.security import APIKeyHeader\nfrom pydantic import BaseModel\nfrom typing import Dict, List, Optional\nimport asyncio\nimport uuid\n\nfrom agents import Agent, Runner\nfrom arcadepy import AsyncArcade\nfrom agents_arcade import get_arcade_tools\nfrom agents_arcade.errors import AuthorizationError, ToolError\n\napp = FastAPI()\napi_key_header = APIKeyHeader(name=\"X-API-Key\")\n\n# Store active jobs\nactive_jobs = {}\n\n# Models\nclass AgentRequest(BaseModel):\n    user_id: str\n    input: str\n    toolkits: List[str]\n    model: str = \"gpt-4o-mini\"\n\nclass AgentResponse(BaseModel):\n    job_id: str\n    status: str\n    output: Optional[str] = None\n    authorization_url: Optional[str] = None\n\n# Authentication dependency\ndef get_api_key(api_key: str = Depends(api_key_header)):\n    if api_key != \"your-api-key\":  # Replace with actual API key validation\n        raise HTTPException(status_code=403, detail=\"Invalid API key\")\n    return api_key\n\n# Create an Arcade client\narcade_client = AsyncArcade()\n\n@app.post(\"/agent/run\", response_model=AgentResponse)\nasync def run_agent(request: AgentRequest, api_key: str = Depends(get_api_key), background_tasks: BackgroundTasks = None):\n    # Generate a job ID\n    job_id = str(uuid.uuid4())\n\n    # Store initial job status\n    active_jobs[job_id] = {\n        \"status\": \"pending\",\n        \"output\": None,\n        \"authorization_url\": None\n    }\n\n    # Start the agent task in the background\n    background_tasks.add_task(process_agent_request, job_id, request)\n\n    return AgentResponse(\n        job_id=job_id,\n        status=\"pending\"\n    )\n\nasync def process_agent_request(job_id: str, request: AgentRequest):\n    try:\n        # Get the requested tools\n        tools = await get_arcade_tools(arcade_client, request.toolkits)\n\n        # Create the agent\n        agent = Agent(\n            name=\"API Agent\",\n            instructions=\"You are a helpful assistant with access to various tools.\",\n            model=request.model,\n            tools=tools,\n        )\n\n        # Run the agent\n        result = await Runner.run(\n            starting_agent=agent,\n            input=request.input,\n            context={\"user_id\": request.user_id},\n        )\n\n        # Update job status\n        active_jobs[job_id] = {\n            \"status\": \"completed\",\n            \"output\": result.final_output,\n            \"authorization_url\": None\n        }\n\n    except AuthorizationError as e:\n        # Update job status with authorization URL\n        active_jobs[job_id] = {\n            \"status\": \"authorization_required\",\n            \"output\": None,\n            \"authorization_url\": e.result.url\n        }\n\n    except ToolError as e:\n        # Update job status with error\n        active_jobs[job_id] = {\n            \"status\": \"error\",\n            \"output\": f\"Tool error: {e.message}\",\n            \"authorization_url\": None\n        }\n\n    except Exception as e:\n        # Update job status with error\n        active_jobs[job_id] = {\n            \"status\": \"error\",\n            \"output\": f\"Error: {str(e)}\",\n            \"authorization_url\": None\n        }\n\n@app.get(\"/agent/status/{job_id}\", response_model=AgentResponse)\nasync def get_job_status(job_id: str, api_key: str = Depends(get_api_key)):\n    if job_id not in active_jobs:\n        raise HTTPException(status_code=404, detail=\"Job not found\")\n\n    job = active_jobs[job_id]\n    return AgentResponse(\n        job_id=job_id,\n        status=job[\"status\"],\n        output=job[\"output\"],\n        authorization_url=job[\"authorization_url\"]\n    )\n</code></pre>"},{"location":"guides/custom-usage/#caching-tool-results","title":"Caching Tool Results","text":"<p>For performance optimization, you might want to cache tool results:</p> <pre><code>import functools\nimport asyncio\nimport json\n\n# Simple in-memory cache\ncache = {}\ncache_ttl = 300  # 5 minutes\n\n# Create a caching decorator for tool calls\ndef cache_tool_result(ttl=cache_ttl):\n    def decorator(func):\n        @functools.wraps(func)\n        async def wrapper(context, tool_args, *args, **kwargs):\n            # Create a cache key from the tool name and arguments\n            tool_name = kwargs.get(\"tool_name\", \"unknown_tool\")\n            cache_key = f\"{tool_name}:{tool_args}\"\n\n            # Check if result is in cache and not expired\n            if cache_key in cache:\n                timestamp, result = cache[cache_key]\n                if (asyncio.get_event_loop().time() - timestamp) &lt; ttl:\n                    print(f\"Cache hit for {tool_name}\")\n                    return result\n\n            # Execute the tool and cache the result\n            result = await func(context, tool_args, *args, **kwargs)\n            cache[cache_key] = (asyncio.get_event_loop().time(), result)\n            return result\n        return wrapper\n    return decorator\n\n# Apply the cache decorator to _async_invoke_arcade_tool\nfrom agents_arcade.tools import _async_invoke_arcade_tool\n\n# Cached version\n@cache_tool_result(ttl=300)\nasync def cached_invoke_arcade_tool(context, tool_args, tool_name, requires_auth, client):\n    return await _async_invoke_arcade_tool(\n        context=context,\n        tool_args=tool_args,\n        tool_name=tool_name,\n        requires_auth=requires_auth,\n        client=client\n    )\n\n# Replace the original function with the cached version in your tools\n# Note: This requires modifying the tool construction process\n</code></pre>"},{"location":"guides/custom-usage/#persistent-user-storage","title":"Persistent User Storage","text":"<p>For applications with many users, you might want to store user authentication state:</p> <pre><code>import sqlite3\nimport json\nfrom contextlib import contextmanager\n\n# Simple SQLite-based user storage\nclass UserStore:\n    def __init__(self, db_path=\"users.db\"):\n        self.db_path = db_path\n        self._init_db()\n\n    def _init_db(self):\n        with self._get_conn() as conn:\n            cursor = conn.cursor()\n            cursor.execute(\"\"\"\n            CREATE TABLE IF NOT EXISTS users (\n                user_id TEXT PRIMARY KEY,\n                auth_state TEXT,\n                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n                updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n            )\n            \"\"\")\n            conn.commit()\n\n    @contextmanager\n    def _get_conn(self):\n        conn = sqlite3.connect(self.db_path)\n        try:\n            yield conn\n        finally:\n            conn.close()\n\n    def get_user(self, user_id):\n        with self._get_conn() as conn:\n            cursor = conn.cursor()\n            cursor.execute(\"SELECT user_id, auth_state FROM users WHERE user_id = ?\", (user_id,))\n            row = cursor.fetchone()\n            if row:\n                return {\n                    \"user_id\": row[0],\n                    \"auth_state\": json.loads(row[1]) if row[1] else {}\n                }\n            return None\n\n    def create_or_update_user(self, user_id, auth_state=None):\n        with self._get_conn() as conn:\n            cursor = conn.cursor()\n            existing = self.get_user(user_id)\n\n            if existing:\n                cursor.execute(\n                    \"UPDATE users SET auth_state = ?, updated_at = CURRENT_TIMESTAMP WHERE user_id = ?\",\n                    (json.dumps(auth_state), user_id)\n                )\n            else:\n                cursor.execute(\n                    \"INSERT INTO users (user_id, auth_state) VALUES (?, ?)\",\n                    (user_id, json.dumps(auth_state) if auth_state else None)\n                )\n            conn.commit()\n\n    def record_authorization(self, user_id, toolkit, status):\n        user = self.get_user(user_id)\n        auth_state = user[\"auth_state\"] if user else {}\n        auth_state[toolkit] = {\n            \"status\": status,\n            \"timestamp\": datetime.now().isoformat()\n        }\n        self.create_or_update_user(user_id, auth_state)\n\n# Example usage\nuser_store = UserStore()\n\n# Before running agent\nuser = user_store.get_user(\"user@example.com\")\nif not user:\n    user_store.create_or_update_user(\"user@example.com\")\n\n# After successful authorization\nuser_store.record_authorization(\"user@example.com\", \"github\", \"authorized\")\n</code></pre>"},{"location":"guides/custom-usage/#conclusion","title":"Conclusion","text":"<p>These advanced techniques should help you build more sophisticated applications with <code>agents-arcade</code>. You can combine these patterns to create powerful, robust, and user-friendly agent systems that leverage Arcade's extensive toolkit ecosystem.</p>"},{"location":"guides/error-handling/","title":"Error Handling","text":"<p>This guide covers how to properly handle errors when using <code>agents-arcade</code> with OpenAI Agents. Effective error handling is crucial for creating a smooth user experience, especially when working with tools that require authentication.</p>"},{"location":"guides/error-handling/#common-errors","title":"Common Errors","text":"<p>When working with Arcade tools, you might encounter several types of errors:</p> <ol> <li>Authorization Errors: Occur when a tool requires authentication but the user hasn't completed the authorization flow</li> <li>Tool Execution Errors: Occur when a tool fails to execute properly</li> <li>Client Errors: Issues with the Arcade client itself, such as invalid API keys or network problems</li> </ol>"},{"location":"guides/error-handling/#handling-authorization-errors","title":"Handling Authorization Errors","text":"<p>The most common error when using Arcade tools is the <code>AuthorizationError</code>, which occurs when a tool requires user authorization.</p>"},{"location":"guides/error-handling/#basic-authorization-error-handling","title":"Basic Authorization Error Handling","text":"<pre><code>from agents import Agent, Runner\nfrom arcadepy import AsyncArcade\nfrom agents_arcade import get_arcade_tools\nfrom agents_arcade.errors import AuthorizationError\n\nasync def run_agent():\n    client = AsyncArcade()\n    tools = await get_arcade_tools(client, toolkits=[\"github\"])\n\n    agent = Agent(\n        name=\"GitHub Agent\",\n        instructions=\"You are a helpful assistant for GitHub.\",\n        model=\"gpt-4o-mini\",\n        tools=tools,\n    )\n\n    try:\n        result = await Runner.run(\n            starting_agent=agent,\n            input=\"List my repositories\",\n            context={\"user_id\": \"user@example.com\"},\n        )\n        return result.final_output\n    except AuthorizationError as e:\n        # Extract the authorization URL and present it to the user\n        auth_url = e.result.url\n        return f\"Please authorize access at: {auth_url}\"\n</code></pre>"},{"location":"guides/error-handling/#interactive-authorization-flow","title":"Interactive Authorization Flow","text":"<p>For a better user experience, you might want to guide the user through the authorization process and retry the operation once authorized:</p> <pre><code>async def run_with_authorization():\n    client = AsyncArcade()\n    user_id = \"user@example.com\"\n\n    try:\n        tools = await get_arcade_tools(client, toolkits=[\"github\"])\n        agent = Agent(\n            name=\"GitHub Agent\",\n            instructions=\"You are a helpful GitHub assistant.\",\n            model=\"gpt-4o-mini\",\n            tools=tools,\n        )\n\n        return await Runner.run(\n            starting_agent=agent,\n            input=\"List my repositories\",\n            context={\"user_id\": user_id},\n        ).final_output\n    except AuthorizationError as e:\n        print(f\"Authorization required. Please visit: {e.result.url}\")\n        print(\"Once you've completed authorization, the operation will continue...\")\n\n        # Wait for the user to complete authorization\n        auth_result = await client.auth.wait_for_completion(\n            e.result.authorization_id)\n\n        if auth_result.status == \"completed\":\n            print(\"Authorization successful! Retrying operation...\")\n            # Retry the operation now that authorization is complete\n            return await run_with_authorization()\n        else:\n            return \"Authorization failed or timed out.\"\n</code></pre>"},{"location":"guides/error-handling/#handling-tool-execution-errors","title":"Handling Tool Execution Errors","text":"<p>When a tool fails to execute properly, a <code>ToolError</code> is raised with details about what went wrong.</p> <pre><code>from agents_arcade.errors import ToolError, AuthorizationError\n\nasync def run_agent_safely():\n    try:\n        tools = await get_arcade_tools(client, toolkits=[\"github\"])\n        agent = Agent(\n            name=\"GitHub Agent\",\n            instructions=\"You are a helpful GitHub assistant.\",\n            model=\"gpt-4o-mini\",\n            tools=tools,\n        )\n\n        return await Runner.run(\n            starting_agent=agent,\n            input=\"Create a repository named my-repo\",\n            context={\"user_id\": \"user@example.com\"},\n        ).final_output\n    except AuthorizationError as e:\n        return f\"Authorization required: {e.result.url}\"\n    except ToolError as e:\n        # Handle specific tool errors\n        error_message = e.message\n\n        if \"already exists\" in error_message.lower():\n            return \"A repository with that name already exists. Please try a different name.\"\n        elif \"permission\" in error_message.lower():\n            return \"You don't have permission to perform this action.\"\n        else:\n            return f\"An error occurred: {error_message}\"\n</code></pre>"},{"location":"guides/error-handling/#comprehensive-error-handling","title":"Comprehensive Error Handling","text":"<p>For a production application, you'll want to handle all potential errors:</p> <pre><code>from agents_arcade.errors import ToolError, AuthorizationError\nfrom arcadepy.exceptions import ArcadeError\n\nasync def run_with_comprehensive_error_handling():\n    try:\n        # Create client\n        client = AsyncArcade()\n\n        # Get tools\n        try:\n            tools = await get_arcade_tools(client, toolkits=[\"github\", \"google\"])\n        except ValueError as e:\n            return f\"Configuration error: {e}\"\n        except ArcadeError as e:\n            return f\"Arcade client error: {e}\"\n\n        # Create agent\n        agent = Agent(\n            name=\"Multi-tool Agent\",\n            instructions=\"You can help with GitHub and Google services.\",\n            model=\"gpt-4o-mini\",\n            tools=tools,\n        )\n\n        # Run agent\n        try:\n            result = await Runner.run(\n                starting_agent=agent,\n                input=\"List my GitHub repositories and recent emails\",\n                context={\"user_id\": \"user@example.com\"},\n            )\n            return result.final_output\n        except AuthorizationError as e:\n            return f\"Authorization required: {e.result.url}\"\n        except ToolError as e:\n            return f\"Tool execution failed: {e.message}\"\n        except Exception as e:\n            return f\"Unexpected error running agent: {e}\"\n\n    except Exception as e:\n        return f\"Unexpected error: {e}\"\n</code></pre>"},{"location":"guides/error-handling/#user-friendly-error-messages","title":"User-Friendly Error Messages","text":"<p>When displaying errors to end users, it's important to provide helpful guidance:</p> <pre><code>def handle_arcade_error(error):\n    if isinstance(error, AuthorizationError):\n        return {\n            \"type\": \"auth_required\",\n            \"message\": \"Authentication required\",\n            \"details\": \"Please click the link below to authorize access\",\n            \"url\": error.result.url,\n            \"auth_id\": error.result.authorization_id\n        }\n    elif isinstance(error, ToolError):\n        # Customize based on the tool and error message\n        tool_name = error.result.tool_name\n        error_msg = error.message\n\n        if tool_name.startswith(\"github\"):\n            return handle_github_error(error_msg)\n        elif tool_name.startswith(\"google\"):\n            return handle_google_error(error_msg)\n        else:\n            return {\n                \"type\": \"tool_error\",\n                \"message\": f\"Error using {tool_name}\",\n                \"details\": error_msg\n            }\n    else:\n        return {\n            \"type\": \"unknown_error\",\n            \"message\": \"An unexpected error occurred\",\n            \"details\": str(error)\n        }\n\ndef handle_github_error(error_msg):\n    if \"not found\" in error_msg.lower():\n        return {\n            \"type\": \"not_found\",\n            \"message\": \"GitHub repository not found\",\n            \"details\": \"Please check the repository name and try again\"\n        }\n    # Add more specific GitHub error handling\n    return {\n        \"type\": \"github_error\",\n        \"message\": \"GitHub error\",\n        \"details\": error_msg\n    }\n</code></pre>"},{"location":"guides/error-handling/#logging-errors-for-debugging","title":"Logging Errors for Debugging","text":"<p>For debugging and monitoring purposes, it's important to log errors:</p> <pre><code>import logging\n\n# Set up logging\nlogging.basicConfig(\n    level=logging.INFO,\n    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'\n)\nlogger = logging.getLogger(\"agents-arcade\")\n\nasync def run_with_logging():\n    try:\n        # Your agent code here\n        pass\n    except AuthorizationError as e:\n        logger.info(f\"Authorization required for user: {user_id}, tool: {e.result.tool_name}\")\n        # Handle error for user\n    except ToolError as e:\n        logger.error(f\"Tool error: {e.result.tool_name} failed with: {e.message}\")\n        # Handle error for user\n    except Exception as e:\n        logger.exception(f\"Unexpected error: {e}\")\n        # Handle error for user\n</code></pre>"},{"location":"guides/error-handling/#conclusion","title":"Conclusion","text":"<p>Proper error handling is essential for creating a good user experience with Arcade tools. By anticipating and gracefully handling different types of errors, you can guide users through authentication processes and provide helpful feedback when things go wrong.</p>"},{"location":"guides/toolkits/","title":"Arcade Toolkits Guide","text":"<p>This guide provides an overview of the available Arcade toolkits that you can use with OpenAI Agents through the <code>agents-arcade</code> library.</p>"},{"location":"guides/toolkits/#available-toolkits","title":"Available Toolkits","text":"<p>Arcade offers a variety of toolkits that provide access to different services and APIs:</p> Toolkit Description Authentication Required <code>github</code> Interact with GitHub repositories, issues, PRs Yes <code>google</code> Access Gmail, Drive, Calendar, Docs, etc. Yes <code>linkedin</code> Interact with LinkedIn (posts, profile, messaging) Yes <code>x</code> Interact with X/Twitter (tweets, timeline, etc.) Yes <code>web</code> Web search, browser automation Partial <code>news</code> Access news articles and headlines No <code>maps</code> Geolocation, directions, place info Partial <code>weather</code> Current weather and forecasts No <code>datasources</code> Connect to databases, APIs, and other data sources Varies <p>For the most up-to-date list of available toolkits, check the Arcade Integrations documentation.</p>"},{"location":"guides/toolkits/#using-toolkits","title":"Using Toolkits","text":"<p>To use a toolkit with your agent, you need to include it when fetching tools:</p> <pre><code>from agents_arcade import get_arcade_tools\n\n# Use a single toolkit\ntools = await get_arcade_tools(client, toolkits=[\"github\"])\n\n# Use multiple toolkits\ntools = await get_arcade_tools(client, toolkits=[\"github\", \"google\", \"news\"])\n</code></pre>"},{"location":"guides/toolkits/#filtering-tools-within-a-toolkit","title":"Filtering Tools Within a Toolkit","text":"<p>If you only need specific tools from a toolkit, you can include only what you need:</p> <pre><code># Only get specific GitHub tools\ntools = await get_arcade_tools(\n    client,\n    tools=[\"github_get_repository\", \"github_list_user_repositories\"]\n)\n</code></pre>"},{"location":"guides/toolkits/#github-toolkit","title":"GitHub Toolkit","text":"<p>The GitHub toolkit allows agents to interact with GitHub repositories, issues, pull requests, and more.</p>"},{"location":"guides/toolkits/#common-github-tools","title":"Common GitHub Tools","text":"<ul> <li><code>github_get_repository</code>: Get repository information</li> <li><code>github_list_user_repositories</code>: List repositories for a user</li> <li><code>github_create_repository</code>: Create a new repository</li> <li><code>github_get_issues</code>: Get issues for a repository</li> <li><code>github_create_issue</code>: Create a new issue</li> <li><code>github_star_repository</code>: Star a repository</li> </ul>"},{"location":"guides/toolkits/#example-github-usage","title":"Example GitHub Usage","text":"<pre><code>tools = await get_arcade_tools(client, toolkits=[\"github\"])\nagent = Agent(\n    name=\"GitHub agent\",\n    instructions=\"You are a helpful assistant that can assist with GitHub API calls.\",\n    model=\"gpt-4o-mini\",\n    tools=tools,\n)\n</code></pre>"},{"location":"guides/toolkits/#google-toolkit","title":"Google Toolkit","text":"<p>The Google toolkit provides access to Google services like Gmail, Drive, Calendar, Docs, and more.</p>"},{"location":"guides/toolkits/#common-google-tools","title":"Common Google Tools","text":"<ul> <li><code>google_gmail_get_messages</code>: Get Gmail messages</li> <li><code>google_gmail_send_message</code>: Send an email</li> <li><code>google_drive_list_files</code>: List files in Google Drive</li> <li><code>google_calendar_list_events</code>: List calendar events</li> <li><code>google_docs_create_document</code>: Create a new Google Doc</li> </ul>"},{"location":"guides/toolkits/#example-google-usage","title":"Example Google Usage","text":"<pre><code>tools = await get_arcade_tools(client, toolkits=[\"google\"])\nagent = Agent(\n    name=\"Google Assistant\",\n    instructions=\"You are a helpful assistant that can work with Google services.\",\n    model=\"gpt-4o-mini\",\n    tools=tools,\n)\n</code></pre>"},{"location":"guides/toolkits/#linkedin-toolkit","title":"LinkedIn Toolkit","text":"<p>The LinkedIn toolkit allows agents to interact with LinkedIn profiles, posts, and messaging.</p>"},{"location":"guides/toolkits/#common-linkedin-tools","title":"Common LinkedIn Tools","text":"<ul> <li><code>linkedin_get_profile</code>: Get LinkedIn profile information</li> <li><code>linkedin_create_post</code>: Create a LinkedIn post</li> <li><code>linkedin_send_message</code>: Send a LinkedIn message</li> <li><code>linkedin_get_feed</code>: Get the LinkedIn feed</li> </ul>"},{"location":"guides/toolkits/#example-linkedin-usage","title":"Example LinkedIn Usage","text":"<pre><code>tools = await get_arcade_tools(client, toolkits=[\"linkedin\"])\nagent = Agent(\n    name=\"LinkedIn Assistant\",\n    instructions=\"You are a helpful assistant for LinkedIn interactions.\",\n    model=\"gpt-4o-mini\",\n    tools=tools,\n)\n</code></pre>"},{"location":"guides/toolkits/#web-toolkit","title":"Web Toolkit","text":"<p>The Web toolkit provides tools for searching the web and interacting with web content.</p>"},{"location":"guides/toolkits/#common-web-tools","title":"Common Web Tools","text":"<ul> <li><code>web_search</code>: Search the web for information</li> <li><code>web_browse</code>: Visit and extract content from a specific URL</li> <li><code>web_scrape</code>: Extract structured data from web pages</li> </ul>"},{"location":"guides/toolkits/#example-web-usage","title":"Example Web Usage","text":"<pre><code>tools = await get_arcade_tools(client, toolkits=[\"web\"])\nagent = Agent(\n    name=\"Web Assistant\",\n    instructions=\"You are a helpful assistant for web searches and browsing.\",\n    model=\"gpt-4o-mini\",\n    tools=tools,\n)\n</code></pre>"},{"location":"guides/toolkits/#combining-toolkits","title":"Combining Toolkits","text":"<p>One of the most powerful features of <code>agents-arcade</code> is the ability to combine multiple toolkits in a single agent:</p> <pre><code>tools = await get_arcade_tools(client, toolkits=[\"github\", \"google\", \"web\"])\nagent = Agent(\n    name=\"Super Assistant\",\n    instructions=\"\"\"You are a versatile assistant that can:\n    - Help with GitHub repositories and issues\n    - Manage emails and Google documents\n    - Search the web for information\n    Always use the most appropriate tools for the user's request.\"\"\",\n    model=\"gpt-4o-mini\",\n    tools=tools,\n)\n</code></pre> <p>This creates a powerful agent that can handle a wide range of tasks across different services, providing a seamless experience for the user.</p>"},{"location":"guides/toolkits/#authentication-considerations","title":"Authentication Considerations","text":"<p>Remember that many toolkits require authentication. When using multiple authenticated toolkits, the user will need to complete the authentication flow for each service the first time they use it. See the Authentication guide for more details.</p>"}]}